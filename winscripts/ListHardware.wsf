<?xml version="1.0" ?>
<package>
	<job id="ListHardware" prompt="no">
		<?job error="false" debug="false" ?>
		<runtime>
			<description>
Lists installed hardware on one or more computers.

Use only one of the following:
  /list:filename    : text file containing one computer name per line
  /container:ouname : name of an OU containing computer accounts
  /computer:name    : run command against single specified computer

Other arguments are optional.
			</description>
			<named helpstring="Text file to pull computer names from" name="list" required="false" type="string"/>
			<named helpstring="OU to pull computer names from" name="container" required="false" type="string"/>
			<named helpstring="Run command against single specified computer" name="computer" required="false" type="string"/>
			<named helpstring="Display detailed messages" name="verbose" required="false" type="simple"/>
			<named helpstring="Use with /container to include sub-OUs" name="recurse" required="false" type="simple"/>
			<named helpstring="File to log names which can't be reached" name="log" required="false" type="string"/>
			<named helpstring="Reduce timeout wait by pinging before attempting" name="ping" required="false" type="simple"/>
			<named helpstring="Path and filename to write output to" name="output" required="false" type="string"/>
		</runtime>
		<object id="fso" progid="Scripting.FileSystemObject"/>
		<script id="MultiComputer" language="VBScript">
<![CDATA[
'----------------------------------------------------------
' List hardware
'----------------------------------------------------------
' Supported: 2003,XP,2000,NT4

'make sure we're running from CScript, not WScript
If LCase(Right(WScript.FullName,11)) <> "cscript.exe" Then
	If MsgBox("This script is designed to work with CScript, but you are running it under WScript. " & _
	 "This script may produce a large number of dialog boxes when running under WScript, which you may " & _
	 "find to be inefficient. Do you want to continue anyway?",4+256+32,"Script host warning") = 7 Then
		WScript.Echo "Tip: Run ""Cscript //h:cscript"" from a command-line to make CScript the default scripting host."
		WScript.Quit
	End If
End If	

'count arguments
Dim iArgs
If WScript.Arguments.Named.exists("computer") Then iArgs = iArgs + 1
If WScript.Arguments.Named.exists("container") Then iArgs = iArgs + 1
If WScript.Arguments.Named.exists("list") Then iArgs = iArgs + 1
If iArgs <> 1 Then
	WScript.Echo "Must specify either /computer, /container, or /list arguments."
	WScript.Echo "May not specify more than one of these arguments."
	WScript.Echo "Run command again with /? argument for assistance."
	WScript.Quit
End If

'if ping requested, make sure we're on XP or later
Dim bPingAvailable, oLocalWMI, cWindows, oWindows
bPingAvailable = False
Set oLocalWMI = GetObject("winmgmts:\\.\root\cimv2")
Set cWindows = oLocalWMI.ExecQuery("Select BuildNumber from Win32_OperatingSystem",,48)
For Each oWindows In cWindows
	If oWindows.BuildNumber >= 2600 Then
		bPingAvailable = True
	End If
Next

'was ping requested?
If WScript.Arguments.Named.Exists("ping") Then
	If bPingAvailable Then
		Verbose "will attempt to ping all connections to improve performance"
	Else
		WScript.Echo "*** /ping not supported prior to Windows XP"
	End If 
End If

    If WScript.Arguments.Named.Exists("output") Then
       LogFile WScript.Arguments.Named("output"),"computer,description,deviceid,name,service",True
    Else
        WScript.Echo "computer, description, deviceid, name, service"
    End If  


'either /list, /computer, or /container was specified:
Dim sName
If WScript.Arguments.Named("list") <> "" Then
	'specified list - read names from file
	Dim oFSO, oTS
	Verbose "Reading names from file " & WScript.Arguments.Named("list")
	Set oFSO = WScript.CreateObject("Scripting.FileSystemObject")
	On Error Resume Next
	Set oTS = oFSO.OpenTextFile(WScript.Arguments.Named("list"))
	If Err <> 0 Then
		WScript.Echo "Error opening " & WScript.Arguments.Named("list")
		WScript.Echo Err.Description
		WScript.Quit
	End If
	Do Until oTS.AtEndOfStream
		sName = oTS.ReadLine
		TakeAction sName
	Loop
	oTS.Close

Elseif WScript.Arguments.Named("container") <> "" Then
	'specified container - read names from AD
	Dim oObject, oRoot, oChild
	Verbose "Reading names from AD container " & WScript.Arguments.Named("container")
	On Error Resume Next
	Set oRoot = GetObject("LDAP://rootDSE")
	If Err <> 0 Then
		WScript.Echo "Error connecting to default Active Directory domain"
		WScript.Echo Err.Description
		WScript.Quit
	End If
	Set oObject = GetObject("LDAP://ou=" & WScript.Arguments.Named("container") & _
	 "," & oRoot.Get("defaultNamingContext"))
	If Err <> 0 Then
		WScript.Echo "Error opening organizational unit " & WScript.Arguments.Named("container")
		WScript.Echo Err.Description
		WScript.Quit
	End If
	WorkWithOU oObject
	
Elseif WScript.Arguments.Named("computer") <> "" Then
	'specified single computer
	Verbose "Running command against " & WScript.Arguments.Named("computer")
	TakeAction WScript.Arguments.Named("computer")
	
End If

'display output so user will know script finished
WScript.Echo "Command completed."

' ----------------------------------------------------------------------
' Sub WorkWithOU
'
' Iterates child objects in OU; calls itself to handle sub-OUs If
' /recurse argument supplied
' ----------------------------------------------------------------------
Sub WorkWithOU(oObject)
	For Each oChild In oObject
		Select Case oChild.Class
			Case "computer"
				TakeAction Right(oChild.Name,len(oChild.name)-3)
			Case "user"
			Case "organizationalUnit"
				If WScript.Arguments.Named.Exists("recurse") Then
					'recursing sub-OU
					Verbose "Working In " & oChild.Name
					WorkWithOU oChild
				End If
		End Select
	Next
End Sub

' ----------------------------------------------------------------------
' Sub TakeAction
'
' Makes connection and performs command-specific code
' ----------------------------------------------------------------------
Sub TakeAction(sName)

	'verbose output?
	Verbose "Connecting to " & sName
	
	'ping before connecting?
	If WScript.Arguments.Named.Exists("ping") Then
		If Not TestPing(sName,bPingAvailable) Then
			LogBadConnect(sName)
			Exit Sub
		End If
	End If
		
 	
	'#############################################	
	'#          COMMAND CODE GOES HERE           #
	'#-------------------------------------------#
	'#                                           #

    Dim cItems, oItem, sOutput
    Verbose " Connecting to WMI on " & sName
    Set cItems = QueryWMI(sName,"root\cimv2","Select * From Win32_PnPEntity","","")
    If Not IsObject(cItems) Then
        WScript.Echo " *** Couldn't connect to WMI on " & sName
    Else
        For Each oItem In cItems
            sOutput = sName & "," & oItem.description & "," & oItem.deviceid & "," & oItem.name & "," & oItem.service
            If WScript.Arguments.Named.Exists("output") Then
                LogFile WScript.Arguments.Named("output"),sOutput,False
            Else
                WScript.Echo sOutput
            End If
        Next
	End If		

    '#                                           #
	'#-------------------------------------------#
	'#             END COMMAND CODE              #
	'#############################################	

End Sub

' ----------------------------------------------------------------------
' Sub LogBadConnect
'
' Logs failed connections to a log file. Will append if file already exists.
' ----------------------------------------------------------------------
Sub LogBadConnect(sName)
	If WScript.arguments.Named.Exists("log") Then
		Dim oLogFSO, oLogFile
		Set oLogFSO = WScript.CreateObject("Scripting.FileSystemObject")
		On Error Resume Next
		Set oLogFile = oLogFSO.OpenTextFile(WScript.Arguments.Named("log"),8,True)
		If Err <> 0 Then
			WScript.Echo " *** Error opening log file to log an unreachable computer"
			WScript.Echo " " & Err.Description
		Else
			oLogFile.WriteLine sName
			oLogFile.Close
			Verbose " Logging " & sName & " as unreachable"
		End If
	End If
End Sub


' ----------------------------------------------------------------------
' Function TestPing
'
' Tests connectivity to a given name or address; returns true or False
' ----------------------------------------------------------------------
Function TestPing(sName,bPingAvailable)
	If Not bPingAvailable Then
		WScript.Echo " Ping functionality not available prior to Windows XP"
		Exit Function
	End If
	Dim cPingResults, oPingResult
	Verbose " Pinging " & sName
	Set cPingResults = GetObject("winmgmts://./root/cimv2").ExecQuery("SELECT * FROM Win32_PingStatus WHERE Address = '" & sName & "'")
	For Each oPingResult In cPingResults
		If oPingResult.StatusCode = 0 Then
			TestPing = True
			Verbose "  Success"
		Else
			TestPing = False
			Verbose "  *** FAILED"
		End If
	Next
End Function

' ----------------------------------------------------------------------
' Sub Verbose
'
' Outputs status messages if /verbose argument supplied
' ----------------------------------------------------------------------
Sub Verbose(sMessage)
	If WScript.Arguments.Named.Exists("verbose") Then
		WScript.Echo sMessage
	End If
End Sub

' ----------------------------------------------------------------------
' Sub LogFile
'
' Outputs specified text to specified logfile. Set Overwrite=True To
' overwrite existing file, otherwise file will be appended to.
' Each call to this sub is a fresh look at the file, so don't Set
' Overwrite=True except at the beginning of your script.
' ----------------------------------------------------------------------
Sub LogFile(sFile,sText,bOverwrite)
	Dim oFSOOut,oTSOUt,iFlag
	If bOverwrite Then 
		iFlag = 2
	Else
		iFlag = 8
	End If
	Set oFSOOut = WScript.CreateObject("Scripting.FileSystemObject")
	On Error Resume Next
	Set oTSOUt = oFSOOut.OpenTextFile(sFile,iFlag,True)
	If Err <> 0 Then
		WScript.Echo "*** Error logging to " & sFile
		WScript.Echo "    " & Err.Description
	Else
		oTSOUt.WriteLine sText
		oTSOUt.Close
	End If
End Sub

' ----------------------------------------------------------------------
' Function QueryWMI
'
' Executes WMI query and returns results. User and Password may be
' passed as empty strings to use current credentials; pass just a blank
' username to prompt for the password
' ----------------------------------------------------------------------
Function QueryWMI(sName,sNamespace,sQuery,sUser,sPassword)
	Dim oWMILocator, oWMIService, cInstances
	On Error Resume Next

	'create locator
	Set oWMILocator = CreateObject("WbemScripting.SWbemLocator")
	
	If sUser = "" Then

		'no user - connect w/current credentials
		Set oWMIService = oWMILocator.ConnectServer(sName,sNamespace)
		If Err <> 0 Then
			WScript.Echo "*** Error connecting to WMI on " & sName
			WScript.Echo "    " & Err.Description
			Set QueryWMI = Nothing
			Exit Function
		End If    

	Else

		'user specified
		If sUser <> "" And sPassword = "" Then
		
			'no password - need to prompt for password
			If LCase(Right(WScript.FullName,11)) = "cscript.exe" Then

				'cscript - attempt to use ScriptPW.Password object
				Dim oPassword
				Set oPassword = WScript.CreateObject("ScriptPW.Password")
				If Err <> 0 Then
					WScript.Echo " *** Cannot prompt for password prior to Windows XP"
					WScript.Echo "     Either ScriptPW.Password object not present on system, Or"
					WScript.Echo "     " & Err.Description
					WScript.Echo "     Will try to proceed with blank password"
				Else
					WScript.Echo "Enter password for user '" & sUser & "' on '" & sName & "'."
					sPassword = oPassword.GetPassword()
				End If
			Else
				
				'wscript - prompt with InputBox()
				sPassword = InputBox("Enter password for user '" & sUser & "' on '" & sName & "'." & vbcrlf & vbcrlf & _
				 "WARNING: Password will echo to the screen. Run command with CScript to avoid this.")
			End if
		End If
		
		'try to connect using credentials provided
		Set oWMIService = oWMILocator.ConnectServer(sName,sNamespace,sUser,sPassword)
		If Err <> 0 Then
			WScript.Echo " *** Error connecting to WMI on " & sName
			WScript.Echo "     " & Err.Description
			Set QueryWMI = Nothing
			Exit Function
		End If    
	End If
	
	'execute query
	If sQuery <> "" Then
		Set cInstances = oWMIService.ExecQuery(sQuery,,48)
		If Err <> 0 Then 
			WScript.Echo "*** Error executing query "
			WScript.Echo "     " & sQuery
			WScript.Echo "     " & Err.Description
			Set QueryWMI = Nothing
			Exit Function
		Else
			Set QueryWMI = cInstances
		End If    
	Else
		Set QueryWMI = oWMIService
	End If

End Function

' ----------------------------------------------------------------------
' Function QueryADSI
'
' Executes ADSI query. Expects variable sQuery to include a COMPLETE
' query beginning with the provider LDAP:// or WinNT://. The query String
' may include a placeholder for the computer name, such as "%computer%".
' Include the placeholder in variable sPlaceholder to have it replaced
' with the current computer name. E.g., 
'   sQuery = "WinNT://%computer%/Administrator,user"
'   sPlaceholder = "%computer%
' Will query each computer targeted by the script and query their local
' Administrator user accounts.
' ----------------------------------------------------------------------
Function QueryADSI(sName,sQuery,sPlaceholder)

	Dim oObject
	sQuery = Replace(sQuery,sPlaceholder,sName)
	On Error Resume Next
	Verbose " Querying " & sQuery
	Set oObject = GetObject(sQuery)
	If Err <> 0 Then
		WScript.Echo " *** Error executing ADSI query"
		WScript.Echo "     " & sQuery
		WScript.Echo "     " & Err.Description
		Set QueryADSI = Nothing
	Else
		Set QueryADSI = oObject
	End If

End Function
]]>
		</script>
	</job>

<signature>
** SIG ** MIIbCwYJKoZIhvcNAQcCoIIa/DCCGvgCAQExCzAJBgUr
** SIG ** DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
** SIG ** gjcCAR4wJAIBAQQQcAVhGs441BGiowAQS9NQkAIBAAIB
** SIG ** AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFOesHEgDB5St
** SIG ** /I/SkK3nq+jgRScuoIIVlTCCA8QwggMtoAMCAQICEEe/
** SIG ** GZXfjVJGQ/fbbUgNMaQwDQYJKoZIhvcNAQEFBQAwgYsx
** SIG ** CzAJBgNVBAYTAlpBMRUwEwYDVQQIEwxXZXN0ZXJuIENh
** SIG ** cGUxFDASBgNVBAcTC0R1cmJhbnZpbGxlMQ8wDQYDVQQK
** SIG ** EwZUaGF3dGUxHTAbBgNVBAsTFFRoYXd0ZSBDZXJ0aWZp
** SIG ** Y2F0aW9uMR8wHQYDVQQDExZUaGF3dGUgVGltZXN0YW1w
** SIG ** aW5nIENBMB4XDTAzMTIwNDAwMDAwMFoXDTEzMTIwMzIz
** SIG ** NTk1OVowUzELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZl
** SIG ** cmlTaWduLCBJbmMuMSswKQYDVQQDEyJWZXJpU2lnbiBU
** SIG ** aW1lIFN0YW1waW5nIFNlcnZpY2VzIENBMIIBIjANBgkq
** SIG ** hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqcqypMzNIK8K
** SIG ** fYmsh3XwtE7x38EPv2dhvaNkHNq7+cozq4QwiVh+jNtr
** SIG ** 3TaeD7/R7Hjyd6Z+bzy/k68Numj0bJTKvVItq0g99bbV
** SIG ** XV8bAp/6L2sepPejmqYayALhf0xS4w5g7EAcfrkN3j/H
** SIG ** tN+HvV96ajEuA5mBE6hHIM4xcw1XLc14NDOVEpkSud5o
** SIG ** L6rm48KKjCrDiyGHZr2DWFdvdb88qiaHXcoQFTyfhOpU
** SIG ** wQpuxP7FSt25BxGXInzbPifRHnjsnzHJ8eYiGdvEs0dD
** SIG ** mhpfoB6Q5F717nzxfatiAY/1TQve0CJWqJXNroh2ru66
** SIG ** DfPkTdmg+2igrhQ7s4fBuwIDAQABo4HbMIHYMDQGCCsG
** SIG ** AQUFBwEBBCgwJjAkBggrBgEFBQcwAYYYaHR0cDovL29j
** SIG ** c3AudmVyaXNpZ24uY29tMBIGA1UdEwEB/wQIMAYBAf8C
** SIG ** AQAwQQYDVR0fBDowODA2oDSgMoYwaHR0cDovL2NybC52
** SIG ** ZXJpc2lnbi5jb20vVGhhd3RlVGltZXN0YW1waW5nQ0Eu
** SIG ** Y3JsMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA4GA1UdDwEB
** SIG ** /wQEAwIBBjAkBgNVHREEHTAbpBkwFzEVMBMGA1UEAxMM
** SIG ** VFNBMjA0OC0xLTUzMA0GCSqGSIb3DQEBBQUAA4GBAEpr
** SIG ** +epYwkQcMYl5mSuWv4KsAdYcTM2wilhu3wgpo17IypMT
** SIG ** 5wRSDe9HJy8AOLDkyZNOmtQiYhX3PzchT3AxgPGLOIez
** SIG ** 6OiXAP7PVZZOJNKpJ056rrdhQfMqzufJ2V7duyuFPrWd
** SIG ** tdnhV/++tMV+9c8MnvCX/ivTO1IbGzgn9z9KMIID/zCC
** SIG ** AuegAwIBAgIQDekr8NTYKYgYMgUJXpp2iDANBgkqhkiG
** SIG ** 9w0BAQUFADBTMQswCQYDVQQGEwJVUzEXMBUGA1UEChMO
** SIG ** VmVyaVNpZ24sIEluYy4xKzApBgNVBAMTIlZlcmlTaWdu
** SIG ** IFRpbWUgU3RhbXBpbmcgU2VydmljZXMgQ0EwHhcNMDMx
** SIG ** MjA0MDAwMDAwWhcNMDgxMjAzMjM1OTU5WjBXMQswCQYD
** SIG ** VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4x
** SIG ** LzAtBgNVBAMTJlZlcmlTaWduIFRpbWUgU3RhbXBpbmcg
** SIG ** U2VydmljZXMgU2lnbmVyMIIBIjANBgkqhkiG9w0BAQEF
** SIG ** AAOCAQ8AMIIBCgKCAQEAslAoSN3TaHqEGERmdV1+xLif
** SIG ** Yyb/PUOcfBE4ECVVc9l1J2n9TrkgXNMK+aAbKu1VViFh
** SIG ** 2B7b5Lwza8fv3aM3ZY4bkwy2Ux5cfGY1XwWKRf52Tt9T
** SIG ** gKKBIJ2uiFyiCPflMPnuIjdMQgrO38YfxNZV6YE/tVKj
** SIG ** LKoBevKiqo01/p/mXWoFnz1r47+WwP7MYPlA5wegROuB
** SIG ** UW6lKvK2ihAo7Y/cBqCGUJp7SggNMB3KEJ5r9+lYrgSp
** SIG ** QJmyKOiPFqw841NvS9M1nbVvZB2zliy7Ped56216+Rbm
** SIG ** Jq2v75lTt0Aslbh5qv7UUqspdH5C7DkeomoW5lm7JGjY
** SIG ** AIBDEIeAawIDAQABo4HKMIHHMDQGCCsGAQUFBwEBBCgw
** SIG ** JjAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AudmVyaXNp
** SIG ** Z24uY29tMAwGA1UdEwEB/wQCMAAwMwYDVR0fBCwwKjAo
** SIG ** oCagJIYiaHR0cDovL2NybC52ZXJpc2lnbi5jb20vdHNz
** SIG ** LWNhLmNybDAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAO
** SIG ** BgNVHQ8BAf8EBAMCBsAwJAYDVR0RBB0wG6QZMBcxFTAT
** SIG ** BgNVBAMTDFRTQTIwNDgtMS01NDANBgkqhkiG9w0BAQUF
** SIG ** AAOCAQEAh3hw2k5SASBb4HnJgjDE/bkZlr2RAMO9zc3G
** SIG ** 9A7Y//lNwDNiMBHF9XQb1JLeX5wgE7F8Rb5QzYPngBeD
** SIG ** pyeTZxNG+8q4mEEDzJtRWwWLf6hv8xtQGyQu8mmNbCL3
** SIG ** u8oWle0MdMBod9nrmWKHwXOQ+Il0eiOro5h7l7H3jylx
** SIG ** TS51G0hB2vC1DSBU1negl4Jjaf0Jz4rwdbsJm9n5EVUm
** SIG ** mmEyvnoCsHuGvqLDiyIseNE1drySc1z5ueZMFQojzOTS
** SIG ** 1DQuSUAVPA9geiTGpWbvls9w6z7n9A1+3NF8o3ZxacGc
** SIG ** T0cwNSGxoq8aYjwr2Y6qKgd72BizXHvinaVv/jyJrTCC
** SIG ** BBIwggL6oAMCAQICDwDBAIs8PIgR0T72Y+zfQDANBgkq
** SIG ** hkiG9w0BAQQFADBwMSswKQYDVQQLEyJDb3B5cmlnaHQg
** SIG ** KGMpIDE5OTcgTWljcm9zb2Z0IENvcnAuMR4wHAYDVQQL
** SIG ** ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xITAfBgNVBAMT
** SIG ** GE1pY3Jvc29mdCBSb290IEF1dGhvcml0eTAeFw05NzAx
** SIG ** MTAwNzAwMDBaFw0yMDEyMzEwNzAwMDBaMHAxKzApBgNV
** SIG ** BAsTIkNvcHlyaWdodCAoYykgMTk5NyBNaWNyb3NvZnQg
** SIG ** Q29ycC4xHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3Jh
** SIG ** dGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFJvb3QgQXV0
** SIG ** aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
** SIG ** CgKCAQEAqQK9wXDmO/JOGyifl3heMOqiqY0lX/j+lUyj
** SIG ** t/6doiA+fFGim6KPYDJr0UJkee6sdslU2vLrnIYcj5+E
** SIG ** ZrPFa3piI9YdPN4PAZLolsS/LWaammgmmdA6LL8MtVgm
** SIG ** wUbnCj44liypKDmo7EmDQuOED7uabFVhrIJ8oWAtd0zp
** SIG ** mbRkO5pQHDEIJBSfqeeRKxjmPZhjFGBYBWWfHTdSh/en
** SIG ** 75QCxhvTv1VFs4mAvzrsVJROrv2nem10Tq8YzJYJKCEA
** SIG ** V5BgaTe7SxIHPFb/W/ukZgoIptKBVlfvtjteFoF3BNr2
** SIG ** vq6Alf6wzX/WpxpyXDzKvPAIoyIwswaFybMgdxOF3wID
** SIG ** AQABo4GoMIGlMIGiBgNVHQEEgZowgZeAEFvQcO9pcp4j
** SIG ** UX4Usk2O/8uhcjBwMSswKQYDVQQLEyJDb3B5cmlnaHQg
** SIG ** KGMpIDE5OTcgTWljcm9zb2Z0IENvcnAuMR4wHAYDVQQL
** SIG ** ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xITAfBgNVBAMT
** SIG ** GE1pY3Jvc29mdCBSb290IEF1dGhvcml0eYIPAMEAizw8
** SIG ** iBHRPvZj7N9AMA0GCSqGSIb3DQEBBAUAA4IBAQCV6AvA
** SIG ** jfOXGDXtuAEk2HcR81xgMp+eC8s+BZGIj8k65iHy8FeT
** SIG ** LLWgR8hi7/zXzDs7Wqk2VGn+JG0/ycyq3gV83TGNPZ8Q
** SIG ** cGq7/hJPGGnA/NBD4xFaIE/qYnuvqhnIKzclLb5loRKK
** SIG ** JQ9jo/dUHPkhydYV81KsbkMyB/2CF/jlZ2wNUfa98VLH
** SIG ** vefEMPwgMQmIHZUpGk3VHQKl8YDgA7Rb9LHdyFfuZUnH
** SIG ** UlS2tAMoEv+Q1vAIj364l8WrNyzkeuSod+N2oADQaj/B
** SIG ** 0jaK4EESqDVqG2rbNeHUHATkqEUEyFozOG5NHA1itwqi
** SIG ** jNPVVD9GzRxVpnDbEjqHk3Wfp9KgMIIEyzCCA7OgAwIB
** SIG ** AgIQaguZT8AADKsR2CLvfWx5fjANBgkqhkiG9w0BAQQF
** SIG ** ADBwMSswKQYDVQQLEyJDb3B5cmlnaHQgKGMpIDE5OTcg
** SIG ** TWljcm9zb2Z0IENvcnAuMR4wHAYDVQQLExVNaWNyb3Nv
** SIG ** ZnQgQ29ycG9yYXRpb24xITAfBgNVBAMTGE1pY3Jvc29m
** SIG ** dCBSb290IEF1dGhvcml0eTAeFw0wMjA1MjMwODAwMDBa
** SIG ** Fw0xMTA5MjUwODAwMDBaMIGmMQswCQYDVQQGEwJVUzET
** SIG ** MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
** SIG ** bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
** SIG ** aW9uMSswKQYDVQQLEyJDb3B5cmlnaHQgKGMpIDIwMDAg
** SIG ** TWljcm9zb2Z0IENvcnAuMSMwIQYDVQQDExpNaWNyb3Nv
** SIG ** ZnQgQ29kZSBTaWduaW5nIFBDQTCCASAwDQYJKoZIhvcN
** SIG ** AQEBBQADggENADCCAQgCggEBAMPMII283/8+UO56wtQk
** SIG ** JfZ2ziH/zSpWTsqct4KyNXktAMSoCNVjybel9unBwdax
** SIG ** jJaiB/oPtoJSmuuCxr0QxajA7muEjlMbu1D6ZAGJwRbU
** SIG ** gmgAQHhE9RI4TvtjUeD6PbnlN7HfYwcjO3FANEf0a65G
** SIG ** 9SdzHiLLQhkeUbZSmtOj0BPGGT9xBm3ylSFEX0LtwMmZ
** SIG ** ZCC4wTT8okTme7IdL7im3vSh35shD/5YMUFVOH6vWOfk
** SIG ** 7Fl5Jav3Ki8RPzh4PkJ/p2jkfiJoF+ZKksR4RFJHoU+E
** SIG ** iZObwGd76gn7hgN99plxPCunZpjM3y3iKwIaDzRIZfU8
** SIG ** Eq/xhxwdJlJvzAMCAQOjggEqMIIBJjATBgNVHSUEDDAK
** SIG ** BggrBgEFBQcDAzCBogYDVR0BBIGaMIGXgBBb0HDvaXKe
** SIG ** I1F+FLJNjv/LoXIwcDErMCkGA1UECxMiQ29weXJpZ2h0
** SIG ** IChjKSAxOTk3IE1pY3Jvc29mdCBDb3JwLjEeMBwGA1UE
** SIG ** CxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQD
** SIG ** ExhNaWNyb3NvZnQgUm9vdCBBdXRob3JpdHmCDwDBAIs8
** SIG ** PIgR0T72Y+zfQDASBgkrBgEEAYI3FQEEBQIDAwADMB0G
** SIG ** A1UdDgQWBBQl+CtLXchyVK3l9qAqFxb7wflTgTAZBgkr
** SIG ** BgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMC
** SIG ** AUYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQQF
** SIG ** AAOCAQEAn2RKdOFpJ1r4BlMnl8ce0YFz0c66gfQa6pOX
** SIG ** h6/cjzoCtYsQv9MudHQBO7RAE+5RXzzDMptP1ulZyigA
** SIG ** lnIV63EvmJjAA+E1QukIL2Ixmfwx89xCrtxPj8w43nBB
** SIG ** OGANPCCSKxicB/5Wk6nSS4i9mUoiAoVvROyR5hneK7gV
** SIG ** sptw+sXrToMsOnGgMljyNVLbkYhA728b5ylCtHDNfWxv
** SIG ** GsjbnPrRXor30iyaAF/Z9MKzn3vUO/5TdCpnHYEnonXo
** SIG ** QJgHGIsYIAtGct/v9+w2be5ryWZTHb01quXLHWpyE0WA
** SIG ** Htldh2aKHCymysthAwPeCckBsVnAsP3mZpfL+gk7fDCC
** SIG ** BOEwggPJoAMCAQICCmEFh1gAAwAAAFowDQYJKoZIhvcN
** SIG ** AQEFBQAwgaYxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
** SIG ** YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
** SIG ** VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKzApBgNV
** SIG ** BAsTIkNvcHlyaWdodCAoYykgMjAwMCBNaWNyb3NvZnQg
** SIG ** Q29ycC4xIzAhBgNVBAMTGk1pY3Jvc29mdCBDb2RlIFNp
** SIG ** Z25pbmcgUENBMB4XDTA1MDEwNTIzMjAxOVoXDTA2MDQw
** SIG ** NTIzMzAxOVowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
** SIG ** Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
** SIG ** BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwG
** SIG ** A1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjAN
** SIG ** BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzzj34aQn
** SIG ** XvjwzKrO+zreO2IxRgVGu/W2BRrTs6zCnw9MZwgoxEMQ
** SIG ** 9Tt1eX9qkfTWM8hhv/qRkAB68HkdXWhw9pCymHe1Ax0v
** SIG ** m52bdYkvSgFBfJ58y4dDm/SWdJmemMHPQFdYFvbA1ZIW
** SIG ** 5SSFcY+ZSe1VfGXJHzgAI8U+qxHWKWzGnqBwW33VN9Rn
** SIG ** dyDDBs6F+E40gKA1xBxTMgFX77EovWwB461AvICpCUnb
** SIG ** NuM39B1Jqiqna9AZ08yOndaGRnoTStZFGaVTs+J4Ly41
** SIG ** l2tMxugasNPRJJBpq878aW4+TPsCQWLcB5hdflynTCcx
** SIG ** a1ZM4ZjY4NEdcY09KsB/cU3/zwIDAQABo4IBQDCCATww
** SIG ** DgYDVR0PAQH/BAQDAgbAMB0GA1UdDgQWBBSSERIUNHex
** SIG ** j2g04g7xMjTA6fNjMTATBgNVHSUEDDAKBggrBgEFBQcD
** SIG ** AzCBqQYDVR0jBIGhMIGegBQl+CtLXchyVK3l9qAqFxb7
** SIG ** wflTgaF0pHIwcDErMCkGA1UECxMiQ29weXJpZ2h0IChj
** SIG ** KSAxOTk3IE1pY3Jvc29mdCBDb3JwLjEeMBwGA1UECxMV
** SIG ** TWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhN
** SIG ** aWNyb3NvZnQgUm9vdCBBdXRob3JpdHmCEGoLmU/AAAyr
** SIG ** Edgi731seX4wSgYDVR0fBEMwQTA/oD2gO4Y5aHR0cDov
** SIG ** L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
** SIG ** dHMvQ29kZVNpZ25QQ0EuY3JsMA0GCSqGSIb3DQEBBQUA
** SIG ** A4IBAQAMAQoN7iYewxG8xHQ8px3u9UreJ5mi96uMjkdy
** SIG ** oFG/qLFL2H9C1RyPo+a4Er1RI6+xO9Nl8S2MA+lMUO04
** SIG ** 9ldeOnNPM6wTLbUlwzvlkVnf0Bu40K4RBwnMBdNSHOIK
** SIG ** ZHcFGBl3EnUQkxo2FozVIB9sM+9gL22v5vHU2im+itu1
** SIG ** D2uVIkDyK5cyUP/66orGtuPsNoqydylUPn4Wlf5xWY2n
** SIG ** yoQP4f+CEYEvGYfd50Sfje8i8v62jM/I2yGGtZeYSA2r
** SIG ** 2OFjct1v5yyTK5/uthLWOllKIeWfqWJQkxV1HXZf2KDC
** SIG ** +vmkrH4RyvlXv/3Siel97oyk2ge7uhTdE0PV6p3mMYIE
** SIG ** 4jCCBN4CAQEwgbUwgaYxCzAJBgNVBAYTAlVTMRMwEQYD
** SIG ** VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
** SIG ** MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
** SIG ** KzApBgNVBAsTIkNvcHlyaWdodCAoYykgMjAwMCBNaWNy
** SIG ** b3NvZnQgQ29ycC4xIzAhBgNVBAMTGk1pY3Jvc29mdCBD
** SIG ** b2RlIFNpZ25pbmcgUENBAgphBYdYAAMAAABaMAkGBSsO
** SIG ** AwIaBQCggf8wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcC
** SIG ** AQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUw
** SIG ** IwYJKoZIhvcNAQkEMRYEFHCjxVrlERo+RaDldl0bpWjk
** SIG ** LQ9bMIGeBgorBgEEAYI3AgEMMYGPMIGMoGSAYgBXAGkA
** SIG ** bgBkAG8AdwBzACAAQQBkAG0AaQBuAGkAcwB0AHIAYQB0
** SIG ** AG8AcgBzACAAQQB1AHQAbwBtAGEAdABpAG8AbgAgAFQA
** SIG ** bwBvAGwAawBpAHQAIABzAGMAcgBpAHAAdABzoSSAImh0
** SIG ** dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9sZWFybmluZy8w
** SIG ** DQYJKoZIhvcNAQEBBQAEggEAksdqOV7HTJ9j5docf/k5
** SIG ** KOpqPk5gEmKEfLGyF1C8Rwsi/q2lOTAtVcUSk2Sn/c+Q
** SIG ** 2sTbZpX+AZL/CGL7tcwqgH0uXl+dGj/oys7ZhNnhF9Lz
** SIG ** sJUCYy+FqoEeKrhyhE9zei2ApomReAUugpTscWOeu5Sm
** SIG ** tPO9ZUlTvITf4sXCv/j5iHdqfwhiWX2FS3q5z8XrqleF
** SIG ** rrr1PsPH+I0cRdimUwjQdYg6cxIWiAATqjvlK4vLDgEH
** SIG ** 2llKYP8tVT3WgvxucqISiTwYtsET9vDTI2HUF+ubffK3
** SIG ** ZUMRMO3hCCGu1EebAOj78LUs4CQV8IPNxtMTy0QG6kdp
** SIG ** sDoR7SM9mUQLz6GCAf8wggH7BgkqhkiG9w0BCQYxggHs
** SIG ** MIIB6AIBATBnMFMxCzAJBgNVBAYTAlVTMRcwFQYDVQQK
** SIG ** Ew5WZXJpU2lnbiwgSW5jLjErMCkGA1UEAxMiVmVyaVNp
** SIG ** Z24gVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBDQQIQDekr
** SIG ** 8NTYKYgYMgUJXpp2iDAMBggqhkiG9w0CBQUAoFkwGAYJ
** SIG ** KoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0B
** SIG ** CQUxDxcNMDUwMzIxMjE0OTM2WjAfBgkqhkiG9w0BCQQx
** SIG ** EgQQcyx2cCkk7xN4Eja+9anwzTANBgkqhkiG9w0BAQEF
** SIG ** AASCAQBjY3f0e8WKJBAFCBNAI2lvoXpGi9x0Xqvl4zrD
** SIG ** 33pfhRszId4aYymvYUrNacerXJw59k+WeaUnmQ31mMKm
** SIG ** 2pzb+uiLj5511aurMbu5i/2GcoPiogBL89tEQqhx91fa
** SIG ** VWbjpX15CI1v+Cvq8VBw+yuS+bh2dhT3wSjGG0i5Lomf
** SIG ** 5f1bwvKGxl53BqpQUIRAWc6z5wghOjUAYmEuk/cMbBLe
** SIG ** v7v+5s3t0VdeMJJJ+gDyPugvFoSGQF7EvIC9KA69ZE3t
** SIG ** AGFMnf/VCE9OpFnhVmP0nprATmUv8QvPzlN0jUzdoKxh
** SIG ** HCqU0AlCdr9FzDhqZP7Yh7hNEXYjUbhHmY4WRah3
</signature>
</package>
